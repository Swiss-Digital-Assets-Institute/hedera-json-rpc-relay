name: Build Docker and Deploy on Kubernetes
on:
  push:
    branches:
      - main
      - feature/dev_deploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SERVICES: relay,relay-ws
      APP_NAME: rpc-relay
      ENVIRONMENT: dev
      REGISTRY: ${{ secrets.ECR_REGISTRY }}
      K8S_VERSION: v1.27.0
      DOCKER_BUILDKIT: 1

    steps:
      - uses: actions/checkout@v3

      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "version=$(jq -r '.info.version' docs/openrpc.json)" >> "$GITHUB_OUTPUT"
          echo "image_tag=${{ env.ENVIRONMENT }}-$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Set Docker image
        run: |
        OLDIFS="$IFS"
        IFS=','
        read -ra SERVICE_LIST <<EOF
        ${{ env.SERVICES }}
        EOF
        IFS="$OLDIFS"

        for service in "${SERVICE_LIST[@]}"; do
          SERVICE=$service yq eval -i '.services.[env(SERVICE)].image="${{ env.REGISTRY }}$SERVICE:${{ steps.vars.outputs.image_tag }}"' docker-compose.yml
        done

      - name: Build containers
        run: docker compose -f docker-compose.yml build --pull

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image
        run: docker compose -f docker-compose.yml push

      - name: Generate manifests
        env:
          VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        run: >-
            mkdir -p out && $GITHUB_WORKSPACE/deploy/pelm.py
            --app-name ${{ env.APP_NAME }} 
            --services ${{ env.SERVICES }} 
            --env ${{ env.ENVIRONMENT }} 
            --registry ${{ env.REGISTRY }} 
            --image-tag ${{ steps.vars.outputs.image_tag }} 
            --datadog ${{ steps.vars.outputs.version }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.K8S_VERSION }}

      - name: Set K8S context
        uses: azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: ${{ secrets.EKS_ENDPOINT }}
          k8s-secret: ${{ secrets.EKS_SA_SECRET }}

      - name: Deploy to Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/out
